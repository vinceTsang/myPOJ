#include <iostream>
#include <stdio.h>
#include <cstring>
using namespace std;
/**
 * dp[i] means the longest decreasing lenth from the head to i.
 * dp[i] = 1 + max{ dp[j] |  j<i and price[j] > price[i] }
 * v[i] means the nums of the longest path from the head to i
 * if(dp[j]>max) v[i]=v[j]
 * else if(dp[j]==max) v[i]+=v[j];
 * because the decreasing paths start from the head to the end,
 * when j < i, the v[j] can be sure.
 */
int main(){
    int N, i, j, max;
    int dp[5001];
    int price[5001];
    int v[5001];
    scanf("%d",&N);
    for(i = 0; i < N; i++){
        scanf("%d",price + i);
    }
    memset(dp,0,sizeof(dp));
    memset(v,0,sizeof(v));
    for(i = 0; i < N; i++){
        max = 0;
        for(j = i - 1; j >= 0; j--){
            if(price[j] > price[i]){
                if(dp[j] > max){
                    max = dp[j];
                    v[i] = v[j];
                }else if(dp[j] == max){
                    v[i] += v[j];
                }
            }else if(price[j] == price[i]){
                v[j] = 0;
                //redundant,set to zero. 
                //when p[i] equals to p[j].
                //dp[i] won't less than dp[j].
            }
        }
        dp[i] = max + 1;
        if(!max) //the first one. no one greater in front
            v[i] = 1;
    }
    int ans = 0, count = 0;
    for(i = 0; i < N; i++){
        if(dp[i] > ans){
            ans = dp[i];
            count = v[i];
        }else if(dp[i] == ans){
            count += v[i];
        }
    }
    printf("%d %d\n",ans, count);
    return 0;
}
