/**
 * 极大极小搜索 + 状态压缩 + 记忆化搜索 + alpha-beta 剪枝
 * 由于空格子最多只有10个，采用三进制状态压缩
 * 0、1、2分别表示当前的空格子保持空、放0、放1
 * 每个空格子初始权重为1、3、9、27、91...
 * 例如对于前5个空格子，若放入了0、1、0、_、1
 * 则状态为1*1+2*3+1*9+0*27+2*91
 * 搜索时状态可能通过不同的路径重复到达，dp记忆化。
 */
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#define mem(a,b) memset(a,b,sizeof(a))
using namespace std;
const int inf = 1<<30;
struct Point{
    int x,y;
    Point(){}
    Point(int _x,int _y):x(_x),y(_y){}
}p[10],ansp;
int n,tot,best;
char str[10][10];
int vis[10][10], tt;
int way[4][2]={0,1,0,-1,1,0,-1,0};
int pw3[15],dp[60000];
bool check(int x1,int y1,int x2,int y2){
    if(x1>=0 && x2>=0 && x1<n && x2<n
       && str[x1][y1]==str[x2][y2] && !vis[x1][y1])
        return true;
    return false;
}
void dfs(int i,int j){
    if(vis[i][j]) return;
    tt++; vis[i][j]=1;
    for(int k=0;k<4;k++){
        int ii=i+way[k][0],jj=j+way[k][1];
        if(check(ii,jj,i,j))
            dfs(ii,jj);
    }
}
int get_score(){
    mem(vis,0);
    int c1=0,c2=0;
    for(int i=0; i<n; i++)
        for(int j=0; j<n; j++){
            tt=0;
            if(vis[i][j]==0)
                dfs(i,j);
            if(str[i][j]=='0') c1=max(c1,tt);
            else c2=max(c2,tt);
        }
    return c1-c2;
}
int MinSearch(int state,int dep,int now,int beta);
int MaxSearch(int state,int dep,int now,int alpha){
    //棋盘放满
    if(state==0) return get_score();
    if(dp[now]!=-inf) return dp[now];
    int ans=-inf,st=state;
    //枚举所有空位
    while(st){
        int k=st&-st,pos; //k表st二进制最后一位1
        for(pos=0;;pos++) //pos表该空位是第几个空位
            if((1<<pos)&k)
                break;
        str[p[pos].x][p[pos].y]='0';
        int tmp=MinSearch(state-k,dep+1,now+pw3[pos],ans);
        str[p[pos].x][p[pos].y]='.';
        ans=max(tmp,ans);
        if(tmp>=alpha) return tmp;
        //更新最优解
        if(dep==0){
            if(ans>best||(ans==best&&(p[pos].x<ansp.x||
                        (p[pos].x==ansp.x&&p[pos].y<ansp.y)
                        ))){
                best=ans;
                ansp=p[pos];
            }
        }
        st-=k;
    }
    return dp[now]=ans;
}
int MinSearch(int state,int dep,int now,int beta){
    if(state==0) return get_score();
    if(dp[now]!=-inf) return dp[now];
    int ans=inf,st=state;
    while(st){
        int k=st&-st,pos;
        for(pos=0;;pos++){
            if((1<<pos)&k)
                break;
        }
        str[p[pos].x][p[pos].y]='1';
        int tmp=MaxSearch(state-k,dep+1,now+2*pw3[pos],ans);
        str[p[pos].x][p[pos].y]='.';
        ans=min(tmp,ans);
        if(ans<=beta) return ans;
        st-=k;
    }
    return dp[now]=ans;
}
int main()
{
    //freopen("d:\\inputDate.txt","r",stdin);
    //freopen("d:\\outputDate.txt","w",stdout);
    pw3[0]=1;
    for(int i=1;i<=10;i++) pw3[i]=pw3[i-1]*3;
    while(scanf("%d",&n)!=EOF&&n){
        int c1=0,c2=0;
        tot=0;
        for(int i=0;i<n;i++){
            scanf("%s",str[i]);
            for(int j=0;j<n;j++){
                if(str[i][j]=='.') p[tot++]=Point(i,j); //记录空位
                else if(str[i][j]=='0') c1++;
                else c2++;
            }
        }
        //都让'0'作为先手，统一操作
        if(c1>c2){
            //0和1互换后，0代表的将是后手玩家，所求答案符合
            for(int i=0;i<n;i++)
            for(int j=0;j<n;j++){
                if(str[i][j]=='0') str[i][j]='1';
                else if(str[i][j]=='1') str[i][j]='0';
            }
        }
        best=-inf;
        int ret;
        for(int i=0;i<pw3[tot];i++) dp[i]=-inf;
        ret=MaxSearch((1<<tot)-1,0,0,inf); //(1<<tot)-1表初始化各空位都为1，如4个空位则1111
        printf("(%d,%d) %d\n",ansp.x,ansp.y,best);
    }
    return 0;
}
