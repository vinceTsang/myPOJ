/**
 * 由于序号小的优先
 * 而正向将0入度节点加入队列时，对于有多个0入度节点的情况而言
 * 序号小的节点的可能在后面而导致决策错误
 * 故逆向决策，考虑出度为0的节点
 * 每次将当前编号最大的0出度节点从优先队列出队，插入答案的头部
 * 则最终编号小的会被优先放到头部
 * （实现时依然加入到尾部，最后逆序输出即可）
 */
#include <iostream>
#include <vector>
#include <stdio.h>
#include <queue>
#include <cstring>
using namespace std;
const int NUM=225;
typedef struct NODE{
    int label;
    int out;
    int index;
    int conn[NUM];
    int pt;
    bool operator < (const NODE &a) const {
        return label<a.label;
    }
} Node;
int main()
{
    //freopen("d:\\inputDate.txt","r",stdin);
    priority_queue<Node>pri_q;
    int i;
    Node nodes[NUM];
    int _t,N,M,a,b;
    scanf("%d",&_t);
    //bool visit_map[NUM][NUM];
    int ans[NUM], ans_count;
    while(_t--){
        bool solution=true;
        scanf("%d%d",&N,&M);
        for(i=1;i<=N;i++){
            nodes[i].label=i;
            nodes[i].index=i;
            nodes[i].pt=0;
            nodes[i].out=0;
        }
        //memset(visit_map,false,sizeof(visit_map));
        for(i=1; i<=M;i++){
            scanf("%d%d",&a,&b);
            if(a==b){
                solution=false;
                //break; 输入还没接受完呢break什么= =
            }
            //if(visit_map[a][b]) continue; //判断重复输入的边,本题用本算法不判断重复边竟然也能AC
            //visit_map[a][b]=true;
            nodes[a].out++;
            nodes[b].conn[ nodes[b].pt++ ]=a;
        }
        if(M==0){
            for(i=1;i<=N;i++){
                if(i==1) printf("%d",i);
                else printf("% d",i);
            }
            printf("\n");
            continue;
        }else if(!solution){
            printf("-1\n");
            continue;
        }
        for(i=1;i<=N;i++){
            if(nodes[i].out==0){
                pri_q.push(nodes[i]);
            }
        }
        ans_count=1;
        while(!pri_q.empty()){
            Node cur=pri_q.top();
            pri_q.pop();
            ans[ans_count++]=cur.label;
            for(i=0;i<cur.pt;i++){
                if( (--nodes[ cur.conn[i] ].out)==0 ){
                    pri_q.push(nodes[ cur.conn[i] ]);
                }
            }
        }
        ans_count--;
        if(ans_count!=N){
            solution=false;
            printf("-1\n");
            continue;
        }
        for(i=ans_count;i>0;i--){
            nodes[ ans[i] ].index=N-i+1;
        }
        for(i=1;i<=N;i++){
            if(i==1) printf("%d",nodes[i].index);
            else printf("% d",nodes[i].index);
        }
        printf("\n");
    }
    return 0;
}
